{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Krish\\\\jarvis\\\\web_gui\\\\src\\\\components\\\\GlassyBlob.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, memo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { createNoise4D } from 'simplex-noise';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst noise4D = createNoise4D();\nconst GlacisphereMesh = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  intensity = 0.5,\n  speed = 0.012,\n  ampBase = 0.12,\n  ampVar = 0.18\n}) => {\n  _s();\n  const mesh = useRef();\n  const origPositions = useRef();\n  const tRef = useRef(0);\n  useEffect(() => {\n    if (mesh.current) {\n      const pos = mesh.current.geometry.attributes.position.array;\n      origPositions.current = new Float32Array(pos);\n    }\n  }, []);\n  useFrame(() => {\n    tRef.current += speed;\n    const t = tRef.current;\n    const geometry = mesh.current.geometry;\n    const pos = geometry.attributes.position;\n    if (!origPositions.current) return;\n    for (let i = 0; i < pos.count; i++) {\n      const ox = origPositions.current[i * 3];\n      const oy = origPositions.current[i * 3 + 1];\n      const oz = origPositions.current[i * 3 + 2];\n      const len = Math.sqrt(ox * ox + oy * oy + oz * oz);\n      const nx = ox / len;\n      const ny = oy / len;\n      const nz = oz / len;\n      const noise = noise4D(nx * 0.9, ny * 0.9, nz * 0.9, t * 0.5);\n      const amp = ampBase + ampVar * noise;\n      const r = 1.2 * (1 + amp * intensity);\n      pos.setXYZ(i, nx * r, ny * r, nz * r);\n    }\n    pos.needsUpdate = true;\n    geometry.computeVertexNormals();\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    position: [0, 0, 0],\n    children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n      args: [1.2, 64]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshPhysicalMaterial\", {\n      color: new THREE.Color('#FFD700'),\n      roughness: 0.02,\n      metalness: 0.6,\n      transmission: 0.7,\n      thickness: 1.1,\n      ior: 1.45,\n      reflectivity: 0.7,\n      clearcoat: 0.9,\n      clearcoatRoughness: 0.1,\n      attenuationColor: new THREE.Color('#FFC300'),\n      attenuationDistance: 0.7,\n      transparent: true,\n      opacity: 0.98\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}, \"F2keBKr7xnTS+cYV33venA5h5Oc=\", false, function () {\n  return [useFrame];\n})), \"F2keBKr7xnTS+cYV33venA5h5Oc=\", false, function () {\n  return [useFrame];\n});\n_c2 = GlacisphereMesh;\nexport default function GlassyBlob({\n  intensity = 0.5,\n  mode = 'idle',\n  speed,\n  ampBase,\n  ampVar,\n  size = 420\n}) {\n  const dynamicSpeed = speed !== undefined ? speed : mode === 'speaking' ? 0.055 : mode === 'listening' ? 0.008 : 0.012;\n  const dynamicAmpBase = ampBase !== undefined ? ampBase : mode === 'listening' ? 0.22 : mode === 'speaking' ? 0.18 : 0.12;\n  const dynamicAmpVar = ampVar !== undefined ? ampVar : mode === 'listening' ? 0.32 : mode === 'speaking' ? 0.28 : 0.18;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: size,\n      height: size,\n      margin: 'auto',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'all 0.3s ease'\n    },\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 3.5],\n        fov: 50\n      },\n      style: {\n        background: 'transparent',\n        width: '100%',\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10],\n        intensity: 1.5,\n        color: '#fff8e1'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GlacisphereMesh, {\n        intensity: intensity,\n        speed: dynamicSpeed,\n        ampBase: dynamicAmpBase,\n        ampVar: dynamicAmpVar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        files: \"/env/city.hdr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_c3 = GlassyBlob;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GlacisphereMesh$memo\");\n$RefreshReg$(_c2, \"GlacisphereMesh\");\n$RefreshReg$(_c3, \"GlassyBlob\");","map":{"version":3,"names":["React","useRef","useEffect","memo","Canvas","useFrame","Environment","THREE","createNoise4D","jsxDEV","_jsxDEV","noise4D","GlacisphereMesh","_s","_c","intensity","speed","ampBase","ampVar","mesh","origPositions","tRef","current","pos","geometry","attributes","position","array","Float32Array","t","i","count","ox","oy","oz","len","Math","sqrt","nx","ny","nz","noise","amp","r","setXYZ","needsUpdate","computeVertexNormals","ref","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","Color","roughness","metalness","transmission","thickness","ior","reflectivity","clearcoat","clearcoatRoughness","attenuationColor","attenuationDistance","transparent","opacity","_c2","GlassyBlob","mode","size","dynamicSpeed","undefined","dynamicAmpBase","dynamicAmpVar","style","width","height","margin","display","alignItems","justifyContent","transition","camera","fov","background","files","_c3","$RefreshReg$"],"sources":["C:/Users/Krish/jarvis/web_gui/src/components/GlassyBlob.jsx"],"sourcesContent":["import React, { useRef, useEffect, memo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { createNoise4D } from 'simplex-noise';\n\nconst noise4D = createNoise4D();\n\nconst GlacisphereMesh = memo(({ intensity = 0.5, speed = 0.012, ampBase = 0.12, ampVar = 0.18 }) => {\n  const mesh = useRef();\n  const origPositions = useRef();\n  const tRef = useRef(0);\n\n  useEffect(() => {\n    if (mesh.current) {\n      const pos = mesh.current.geometry.attributes.position.array;\n      origPositions.current = new Float32Array(pos);\n    }\n  }, []);\n\n  useFrame(() => {\n    tRef.current += speed;\n    const t = tRef.current;\n    const geometry = mesh.current.geometry;\n    const pos = geometry.attributes.position;\n    if (!origPositions.current) return;\n    \n    for (let i = 0; i < pos.count; i++) {\n      const ox = origPositions.current[i * 3];\n      const oy = origPositions.current[i * 3 + 1];\n      const oz = origPositions.current[i * 3 + 2];\n      const len = Math.sqrt(ox * ox + oy * oy + oz * oz);\n      const nx = ox / len;\n      const ny = oy / len;\n      const nz = oz / len;\n      \n      const noise = noise4D(nx * 0.9, ny * 0.9, nz * 0.9, t * 0.5);\n      const amp = ampBase + ampVar * noise;\n      const r = 1.2 * (1 + amp * intensity);\n      pos.setXYZ(i, nx * r, ny * r, nz * r);\n    }\n    pos.needsUpdate = true;\n    geometry.computeVertexNormals();\n  });\n\n  return (\n    <mesh ref={mesh} position={[0, 0, 0]}>\n      <icosahedronGeometry args={[1.2, 64]} />\n      <meshPhysicalMaterial\n        color={new THREE.Color('#FFD700')}\n        roughness={0.02}\n        metalness={0.6}\n        transmission={0.7}\n        thickness={1.1}\n        ior={1.45}\n        reflectivity={0.7}\n        clearcoat={0.9}\n        clearcoatRoughness={0.1}\n        attenuationColor={new THREE.Color('#FFC300')}\n        attenuationDistance={0.7}\n        transparent\n        opacity={0.98}\n      />\n    </mesh>\n  );\n});\n\nexport default function GlassyBlob({ \n  intensity = 0.5, \n  mode = 'idle', \n  speed, \n  ampBase, \n  ampVar,\n  size = 420 \n}) {\n  const dynamicSpeed = speed !== undefined ? speed : \n    mode === 'speaking' ? 0.055 : \n    mode === 'listening' ? 0.008 : 0.012;\n\n  const dynamicAmpBase = ampBase !== undefined ? ampBase :\n    mode === 'listening' ? 0.22 : \n    mode === 'speaking' ? 0.18 : 0.12;\n\n  const dynamicAmpVar = ampVar !== undefined ? ampVar :\n    mode === 'listening' ? 0.32 : \n    mode === 'speaking' ? 0.28 : 0.18;\n\n  return (\n    <div \n      style={{ \n        width: size, \n        height: size, \n        margin: 'auto', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center',\n        transition: 'all 0.3s ease'\n      }}\n    >\n      <Canvas camera={{ position: [0, 0, 3.5], fov: 50 }} style={{ \n        background: 'transparent',\n        width: '100%',\n        height: '100%'\n      }}>\n        <ambientLight intensity={0.8} />\n        <pointLight position={[10, 10, 10]} intensity={1.5} color={'#fff8e1'} />\n        <GlacisphereMesh \n          intensity={intensity} \n          speed={dynamicSpeed} \n          ampBase={dynamicAmpBase} \n          ampVar={dynamicAmpVar} \n        />\n        <Environment files=\"/env/city.hdr\" />\n      </Canvas>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}